*** openssh-8.1p1/scp.c	2019-10-09 00:31:03.000000000 +0000
--- openssh-8.1p1-pii/scp.c	2019-11-04 09:31:30.198021491 +0000
***************
*** 123,129 ****
  
  extern char *__progname;
  
! #define COPY_BUFLEN	16384
  
  int do_cmd(char *host, char *remuser, int port, char *cmd, int *fdin, int *fdout);
  int do_cmd2(char *host, char *remuser, int port, char *cmd, int fdin, int fdout);
--- 123,129 ----
  
  extern char *__progname;
  
! #define COPY_BUFLEN	163840
  
  int do_cmd(char *host, char *remuser, int port, char *cmd, int *fdin, int *fdout);
  int do_cmd2(char *host, char *remuser, int port, char *cmd, int fdin, int fdout);
***************
*** 389,394 ****
--- 389,425 ----
  void toremote(int, char *[]);
  void usage(void);
  
+ #include <regex.h>        
+ regex_t regex;
+ int compiled = 0;
+ 
+ // For the demo, we only catch AVS numbers.
+ const char *piiRE = "[0-9]{3}\\.[0-9]{4}\\.[0-9]{4}\\.[0-9]{2}";
+ 
+ static int
+ pii(BUF *buf)
+ {
+   int reti;
+   
+   if (! compiled) {
+ 	reti = regcomp(&regex, piiRE, REG_EXTENDED);
+ 	if (reti) {
+ 	  fprintf(stderr, "Could not compile regex\n");
+ 	  exit(1);
+ 	}
+ 	compiled = 1;
+   }
+ 
+   // XXX: What we really want here is regnexec, but that is only available on MacOS.
+   // As is, buffers with 0 in them, will not have PII scanning done after the first 0.
+   reti = regexec(&regex, buf->buf, 0, NULL, 0);
+   if( !reti ) {
+ 	// match to PII
+ 	return -1;
+   }
+   return 0;
+ }
+ 
  int
  main(int argc, char **argv)
  {
***************
*** 1065,1071 ****
  	BUF *bp;
  	off_t i, statbytes;
  	size_t amt, nr;
! 	int fd = -1, haderr, indx;
  	char *last, *name, buf[PATH_MAX + 128], encname[PATH_MAX];
  	int len;
  
--- 1096,1102 ----
  	BUF *bp;
  	off_t i, statbytes;
  	size_t amt, nr;
! 	int fd = -1, piierr, haderr, indx;
  	char *last, *name, buf[PATH_MAX + 128], encname[PATH_MAX];
  	int len;
  
***************
*** 1131,1137 ****
  		if (showprogress)
  			start_progress_meter(curfile, stb.st_size, &statbytes);
  		set_nonblock(remout);
! 		for (haderr = i = 0; i < stb.st_size; i += bp->cnt) {
  			amt = bp->cnt;
  			if (i + (off_t)amt > stb.st_size)
  				amt = stb.st_size - i;
--- 1162,1168 ----
  		if (showprogress)
  			start_progress_meter(curfile, stb.st_size, &statbytes);
  		set_nonblock(remout);
! 		for (piierr = haderr = i = 0; i < stb.st_size; i += bp->cnt) {
  			amt = bp->cnt;
  			if (i + (off_t)amt > stb.st_size)
  				amt = stb.st_size - i;
***************
*** 1141,1146 ****
--- 1172,1183 ----
  					haderr = errno;
  					memset(bp->buf + nr, 0, amt - nr);
  				}
+ 				/* New data just arrived from the source file. Scan for PII. */
+ 				if (pii(bp) != 0) {
+ 				  haderr = 1;
+ 				  piierr = 1;
+ 				  memset(bp->buf, 0, nr);
+ 				}
  			}
  			/* Keep writing after error to retain sync */
  			if (haderr) {
***************
*** 1162,1168 ****
--- 1199,1209 ----
  		if (!haderr)
  			(void) atomicio(vwrite, remout, "", 1);
  		else
+ 		  if (piierr) {
+ 			run_err("%s: %s", name, "PII found in file and copying has been blocked");
+ 		  } else {
  			run_err("%s: %s", name, strerror(haderr));
+ 		  }
  		(void) response();
  		if (showprogress)
  			stop_progress_meter();
