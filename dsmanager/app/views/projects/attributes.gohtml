{{ define "title" }}{{.Title}}{{ end }}
{{ define "content" }}

<div class="pure-g">
    <div class="pure-u-1 pure-u-sm-1-4"><p></p></div>
    <div class="pure-u-1 pure-u-sm-1-2">
    
        <h1>Attributes of Project {{.Project.Title}}</h1>
        {{ $id := .Project.UID }}
        {{ $projectMetadata := .ProjectMetadata }}

        <p><a href="/">home</a> / <a href="/projects">projects</a> / <a href="/projects/{{$id}}">{{$id}}</a> / <a href="/projects/{{$id}}/attributes">attributes</a>

        <p><a class="pure-button" href="/projects/{{$id}}">ðŸ”™ Back to project</a></p>
    
        <p>ðŸ¦‰</p>

        <h3>Business context</h3>

        {{ if .Metadata }}
            <form class="pure-form pure-form-stacked"  method="post">
                <!-- html form only supports POST and GET forms, this is a workaround for PUT -->
                <input type="hidden" name="_method" value="put"/>
                
                {{ range .Metadata.AttributesGroups }}
                    <fieldset>
                        <legend>{{ .Title }}</legend>
                        <p>{{ .ConsumerDescription }}</p>

                        {{ range $attr := .Attributes }}
                            {{ $attr.ConsumerForm $projectMetadata }}
                        {{ end }}
                    </fieldset>
                {{ end }}
                <h3>Additional checks</h3>
                <p>{{ .Metadata.DelegatedEnforcement.Description }}</p>
                {{ range $dataset := .Datasets }}
                    {{ $dataset.DelegatedForm $projectMetadata }}
                {{ end }}
                <button type="submit" class="pure-button pure-button-primary">Update the attributes</button>
            </form>
        {{ else }}
            <p style="color: darkred">No metadata associated with this dataset found</p>
        {{ end }}
    </div>
</div>

<style>
    .sub-form {
        margin-left: 25px;
        padding-left: 15px;
        border-left: 3px solid #f2f2f2;
    }
    .sub-form.disabled {
        pointer-events: none;
        opacity: .3;
    }

    .aligned-checkbox {
        display: flex;
        flex-direction: row;
        margin: .5em 0;
        align-items: center;
    }
    .aligned-checkbox input {
        flex-shrink: 0;
    }
    .aligned-checkbox span {
        padding: 0 5px 0 8px;
    }
    .small-links {
        text-align: right;
    }
    .small-links a {
        color: #aaa;
        font-size: 8px;
        text-decoration: none;
    }
    .statement-title {
        font-weight: bold;
        padding: 15px 0 10px 0;
    }
    .statement-wrapper {
        padding: 10px 15px;
        background: rgb(255, 236, 158);
        transition-duration: .3s;
    }
    .statement-wrapper.checked {
        background: rgb(160, 255, 158);
    }
    .statement {
        font-style: italic;
        text-decoration: underline;
    }
    .failed-reasons {
        padding: 0 0 0 10px;
        margin: 0 0 20px 20px;
        border-left: 2px solid red;
        position: relative;
    }
    .failed-reasons:before {
        position: absolute;
        left: -19px;
        top: -1px;
        content: "";
        border: solid red;
        border-width: 0 2px 2px 0;
        display: inline-block;
        padding: 3px;
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }
    span.reason {
        color: red;
    }
</style>

<script>
    function displayLoader() {
        document.getElementById("loading").style.visibility = "visible"
    };
    // hides or shows the subform that contains the subattributes of an attribute
    function toggleSubform(el) {
        subform = el.parentElement.parentElement.querySelector(":scope > .sub-form")
        if (subform === null) {
            return
        }
        if (el.checked == true) {
            subform.classList.remove("disabled")
        } else {
            subform.classList.add("disabled")
        }
        if (el.type === "radio") {
            // Then we need to uncheck all the other sub-forms that are in the
            // radio button group
            document.querySelectorAll("input[name='access'][type='radio']").forEach(el => {
                subform = el.parentElement.parentElement.querySelector(":scope > .sub-form")
                if (subform === null) {
                    return
                }
                if (el.checked == true) {
                    subform.classList.remove("disabled")
                } else {
                    subform.classList.add("disabled")
                }
            });
        }
    };
    // hides or shows the subform that contains the subattributes of an attribute
    function toggleColor(el) {
        statementWrapper = el.parentElement.parentElement
        if (statementWrapper === null) {
            return
        }
        if (el.checked == false) {
            statementWrapper.classList.remove("checked")
        } else {
            statementWrapper.classList.add("checked")
        }
    };

    document.querySelectorAll(".check-color").forEach(function(el) {
        toggleColor(el);
    });
</script>

{{ end }}