// Performance issue: https://github.com/golang/go/issues/26019

package main

import (
	"context"
	"encoding/gob"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync/atomic"
	"time"

	"github.com/BurntSushi/toml"
	"github.com/dedis/odyssey/dsmanager/app/controllers"
	"github.com/dedis/odyssey/dsmanager/app/helpers"
	"github.com/dedis/odyssey/dsmanager/app/models"
	"github.com/gorilla/mux"
	"github.com/gorilla/sessions"
	xlog "go.dedis.ch/onet/v3/log"
	bolt "go.etcd.io/bbolt"
	"golang.org/x/xerrors"

	// http-swagger middleware
	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
)

type key int

const (
	requestIDKey key = 0
)

var (
	listenAddr string
	healthy    int32
	store      = sessions.NewCookieStore([]byte("TOBECHANGEDOFCOURSE"))
	conf       *models.Config
	db         *bolt.DB
)

// @title Data Scientist Manager REST API
// @version 1.0
// @description REST functionalities provided by the Data Scientist Manager

// @host localhost:5001
// @BasePath /v2
func main() {
	// Register the struct so encoding/gob knows about it
	gob.Register(helpers.Flash{})

	var err error
	conf, err = models.NewConfig()
	if err != nil {
		log.Fatal("failed to load config", err)
	}

	xlog.LLvl1("here is the catalog id:", conf.CatalogID)

	xlog.Info("loading db into memory")
	err := loadDb()
	if err != nil {
		log.Fatal("failed to import DB: " + err.Error())
	}

	flag.StringVar(&listenAddr, "listen-addr", ":5001", "server listen address")
	flag.Parse()

	logger := log.New(os.Stdout, "http: ", log.LstdFlags)
	logger.Println("Server is starting...")

	router := mux.NewRouter()

	router.PathPrefix("/assets/").Handler(http.StripPrefix("/assets/",
		http.FileServer(http.Dir("."+"/assets/"))))
	router.HandleFunc("/favicon.ico", faviconHandler)

	router.Handle("/datasets", http.HandlerFunc(controllers.DatasetsIndexHandler(store, conf, db)))
	router.Handle("/requests", http.HandlerFunc(controllers.RequestsIndexHandler(store, conf, db)))
	router.Handle("/requests/{id}", http.HandlerFunc(controllers.RequestsShowHandler(store, conf, db)))

	router.Handle("/projects", http.HandlerFunc(controllers.ProjectsIndexHandler(store, conf)))
	router.Handle("/projects/{id}", http.HandlerFunc(controllers.ProjectsShowHandler(store, conf)))
	router.Handle("/projects/{id}/attributes", http.HandlerFunc(controllers.ProjectsShowAttributesHandler(store, conf)))
	router.Handle("/projects/{id}/enclave", http.HandlerFunc(controllers.ProjectsShowEnclaveHandler(store, conf)))
	router.Handle("/projects/{id}/unlock", http.HandlerFunc(controllers.ProjectsShowUnlockHandler(store, conf)))
	router.Handle("/projects/{id}/debug", http.HandlerFunc(controllers.ProjectsShowDebugHandler(store, conf)))
	router.Handle("/projects/{id}/status", http.HandlerFunc(controllers.ProjectsShowStatusHandler(store, conf)))
	router.Handle("/projects/{id}/status/stream", http.HandlerFunc(controllers.ProjectsShowStatusStreamHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}", http.HandlerFunc(controllers.ProjectsRequestsShowHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}/cloudstream", http.HandlerFunc(controllers.ProjectsRequestsShowCloudstreamHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}/status/stream", http.HandlerFunc(controllers.ProjectsRequestsShowStatusStreamHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}/tasks/{tid}/stream", http.HandlerFunc(controllers.ProjectsRequestsTasksShowStreamHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}/tasks/{tid}/debug", http.HandlerFunc(controllers.ProjectsRequestsTasksShowDebugHandler(store, conf)))
	router.Handle("/projects/{pid}/requests/{rid}/tasks/{tid}/status", http.HandlerFunc(controllers.ProjectsRequestsTasksShowStatusHandler(store, conf)))

	router.Handle("/tasks/{id}", http.HandlerFunc(controllers.TasksShowHandler(store, conf.TaskManager)))
	router.Handle("/", http.HandlerFunc(controllers.HomeHandler(store, conf)))
	router.Handle("/healthz", healthz())
	router.Handle("/test", http.HandlerFunc(testHandler))
	router.Handle("/authorize", http.HandlerFunc(controllers.AuthorizeHandler(store)))

	fs := http.FileServer(http.Dir("./docs/"))
	router.PathPrefix("/docs/").Handler(http.StripPrefix("/docs/", fs))

	nextRequestID := func() string {
		return fmt.Sprintf("%d", time.Now().UnixNano())
	}

	server := &http.Server{
		Addr:         listenAddr,
		Handler:      tracing(nextRequestID)(logging(logger)(router)),
		ErrorLog:     logger,
		ReadTimeout:  50 * time.Second,
		WriteTimeout: 600 * time.Second,
		// IdleTimeout:  150 * time.Second,
	}

	done := make(chan bool)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)

	go func() {
		<-quit
		logger.Println("Server is shutting down...")

		logger.Println("Saving memory variables into DB...")
		err := saveDb()
		if err != nil {
			xlog.Error("failed to save the db: " + err.Error())
		}

		atomic.StoreInt32(&healthy, 0)

		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()

		server.SetKeepAlivesEnabled(false)
		if err := server.Shutdown(ctx); err != nil {
			logger.Fatalf("Could not gracefully shutdown the server: %v\n", err)
		}
		close(done)
	}()

	logger.Println("Server is ready to handle requests at", listenAddr)
	atomic.StoreInt32(&healthy, 1)
	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		logger.Fatalf("Could not listen on %s: %v\n", listenAddr, err)
	}

	<-done
	logger.Println("Server stopped")
}

// parseConfig parses the config file and return a config struct
func parseConfig() (*models.Config, error) {
	conf := &models.Config{}
	_, err := toml.DecodeFile("config.toml", conf)
	if err != nil {
		return nil, errors.New("failed to read config: " + err.Error())
	}

	return conf, nil
}

func loadDb() error {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		return errors.New("failed to open DB: " + err.Error())
	}
	defer db.Close()
	err = db.Update(func(tx *bolt.Tx) error {
		_, err := tx.CreateBucketIfNotExists([]byte("Projects"))
		if err != nil {
			return fmt.Errorf("create bucket: %s", err)
		}
		return nil
	})
	if err != nil {
		return errors.New("failed to create 'Projects' bucket: " + err.Error())
	}

	db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Projects"))
		tempTaskList := make([]helpers.TaskI, 0)
		b.ForEach(func(k, v []byte) error {
			project := &models.Project{}
			err := json.Unmarshal(v, project)
			if err != nil {
				xlog.Error("failed to unmarshal project: " + err.Error())
				return errors.New("failed to unmarshal project: " + err.Error())
			}
			project.PrepareAfterUnmarshal()
			models.ProjectList[string(k)] = project
			for _, r := range project.Requests {
				for _, t := range r.Tasks {
					tempTaskList = append(tempTaskList, t)
				}
			}
			// Here we assume that each new task were appended to the TaskList
			// with an incrementing Index attribute corresponding to its
			// position in the TaskList
			err = conf.TaskManager.RestoreTasks(tempTaskList)
			if err != nil {
				return xerrors.Errorf("failed to restore tasks: %v", err)
			}

			return nil
		})
		return nil
	})

	return nil
}

func saveDb() error {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		return errors.New("failed to open DB: " + err.Error())
	}
	defer db.Close()
	err = db.Update(func(tx *bolt.Tx) error {
		err := tx.DeleteBucket([]byte("Projects"))
		if err != nil {
			return errors.New("failed to delete the Projects bucket: " + err.Error())
		}
		b, err := tx.CreateBucketIfNotExists([]byte("Projects"))
		if err != nil {
			return fmt.Errorf("create bucket: %s", err)
		}
		for k, project := range models.ProjectList {
			project.PrepareBeforeMarshal()
			projectBuf, err := json.Marshal(project)
			if err != nil {
				return errors.New("failed to marshal project: " + err.Error())
			}
			err = b.Put([]byte(k), projectBuf)
			if err != nil {
				return errors.New("failed to save project buf: " + err.Error())
			}
		}
		return nil
	})
	if err != nil {
		return errors.New("failed to update 'Projects' bucket: " + err.Error())
	}
	return nil
}

func healthz() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if atomic.LoadInt32(&healthy) == 1 {
			w.WriteHeader(http.StatusNoContent)
			return
		}
		w.WriteHeader(http.StatusServiceUnavailable)
	})
}

func faviconHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "assets/images/favicon.ico")
}

func testHandler(w http.ResponseWriter, r *http.Request) {
	value := 12
	p := &struct{ Value int }{value}

	// cl := calypso.NewClient(nil)

	t, _ := template.ParseFiles("test.html")
	t.Execute(w, p)
}

func logging(logger *log.Logger) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			defer func() {
				requestID, ok := r.Context().Value(requestIDKey).(string)
				if !ok {
					requestID = "unknown"
				}
				logger.Println(requestID, r.Method, r.URL.Path, r.RemoteAddr, r.UserAgent())
			}()
			next.ServeHTTP(w, r)
		})
	}
}

func tracing(nextRequestID func() string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			requestID := r.Header.Get("X-Request-Id")
			if requestID == "" {
				requestID = nextRequestID()
			}
			ctx := context.WithValue(r.Context(), requestIDKey, requestID)
			w.Header().Set("X-Request-Id", requestID)
			next.ServeHTTP(w, r.WithContext(ctx))
		})
	}
}
